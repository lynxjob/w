package pams.util;

/**
 * 循环冗余检验CRC
 * CRC-16
 * Uses irreducible polynomial:  1 + x^2 + x^15 + x^16
 * */
public class CalcCRC {
	private static int[] table = {
        0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
        0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
        0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
        0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
        0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
        0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
        0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
        0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
        0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
        0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
        0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
        0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
        0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
        0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
        0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
        0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
        0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
        0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
        0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
        0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
        0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
        0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
        0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
        0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
        0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
        0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
        0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
        0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
        0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
        0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040,
    };

	public static byte[] caluCRC(byte[] bytes) {
	
	for(int i=0;i<bytes.length;i++)
	{
		System.out.print("校验前"+bytes[i]+",");
	}
		int crc = 0xFFFF;
		for (byte b : bytes) {
			crc = (crc >>> 8) ^ table[(crc ^ b) & 0xff];
		}
		byte hBit = (byte)crc;
		byte lBit = (byte)(crc >> 8);
		byte[] hl = {hBit, lBit};
		for(int j=0;j<hl.length;j++)
		{
			System.out.println("校验后"+hl[j]);
		}
		return hl;
	}

	public static void main(String[] args)
	{
		/*byte[] r01 = {0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
		byte[] r02 = {0x08, 0x04, 0x00, 0x01, 0x00, 0x01};
		byte[] r03 = {0x08, 0x04, 0x00, 0x02, 0x00, 0x01};
		byte[] r04 = {0x08, 0x04, 0x00, 0x03, 0x00, 0x01};
		byte[] r05 = {0x08, 0x04, 0x00, 0x04, 0x00, 0x01};
		byte[] r06 = {0x08, 0x04, 0x00, 0x05, 0x00, 0x01};
		byte[] r07 = {0x08, 0x04, 0x00, 0x06, 0x00, 0x01};
		byte[] r08 = {0x08, 0x04, 0x00, 0x07, 0x00, 0x01};
		byte[] r09 = {0x08, 0x04, 0x00, 0x08, 0x00, 0x01};
		byte[] r10 = {0x08, 0x04, 0x00, 0x09, 0x00, 0x01};
		byte[] r11 = {0x08, 0x04, 0x00, 0x0A, 0x00, 0x01};
		byte[] r12 = {0x08, 0x04, 0x00, 0x0B, 0x00, 0x01};
		byte[] r13 = {0x08, 0x04, 0x00, 0x0C, 0x00, 0x01};
		byte[] r14 = {0x08, 0x04, 0x00, 0x0D, 0x00, 0x01};
		byte[] r15 = {0x08, 0x04, 0x00, 0x00, 0x00, 0x0B}; 
		byte[] r16 = {8, 4, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
		
		byte[] bytes = new byte[32];
		byte[] rs = CalcCRC.caluCRC(r01);
		bytes[0] = rs[0];
		bytes[1] = rs[1];
		rs = CalcCRC.caluCRC(r02);
		bytes[2] = rs[0];
		bytes[3] = rs[1];
		rs = CalcCRC.caluCRC(r03);
		bytes[4] = rs[0];
		bytes[5] = rs[1];
		rs = CalcCRC.caluCRC(r04);
		bytes[6] = rs[0];
		bytes[7] = rs[1];
		rs = CalcCRC.caluCRC(r05);
		bytes[8] = rs[0];
		bytes[9] = rs[1];
		rs = CalcCRC.caluCRC(r06);
		bytes[10] = rs[0];
		bytes[11] = rs[1];
		rs = CalcCRC.caluCRC(r07);
		bytes[12] = rs[0];
		bytes[13] = rs[1];
		rs = CalcCRC.caluCRC(r08);
		bytes[14] = rs[0];
		bytes[15] = rs[1];
		rs = CalcCRC.caluCRC(r09);
		bytes[16] = rs[0];
		bytes[17] = rs[1];
		rs = CalcCRC.caluCRC(r10);
		bytes[18] = rs[0];
		bytes[19] = rs[1];
		rs = CalcCRC.caluCRC(r11);
		bytes[20] = rs[0];
		bytes[21] = rs[1];
		rs = CalcCRC.caluCRC(r12);
		bytes[22] = rs[0];
		bytes[23] = rs[1];
		rs = CalcCRC.caluCRC(r13);
		bytes[24] = rs[0];
		bytes[25] = rs[1];
		rs = CalcCRC.caluCRC(r14);
		bytes[26] = rs[0];
		bytes[27] = rs[1];
		rs = CalcCRC.caluCRC(r15);
		bytes[28] = rs[0];
		bytes[29] = rs[1];   
		rs = CalcCRC.caluCRC(r16);
		bytes[30] = rs[0];
		bytes[31] = rs[1];*/
		/*byte[] r01 = {0x08, 0x04, 0x1A, 0x00, 0x00, 0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x63,
				0x00, 0x00,0x00, 0x00,0x00,(byte) 0xE1,0x00, 0x00, 0x00, 0x00,0x00,0x00, 0x00, 0x00, 0x00,0x00,0x00,0x00};
		byte[] rs = CalcCRC.caluCRC(r01);
		byte a=(byte) 0xE1;
		System.out.print(a);*/
		byte[] rs = {0x08,0x04,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08};
		byte[] rs2 = caluCRC(rs);
	}
	
}
